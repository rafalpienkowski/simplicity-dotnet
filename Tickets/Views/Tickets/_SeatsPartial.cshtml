@model IEnumerable<Tickets.Controllers.SeatModel>

<h4>Seats</h4>
<div class="seating-layout">
    <div class="sector">
        @foreach (var row in Model.GroupBy(s => s.Row).OrderBy(r => r.Key))
        {
            <div class="row">
                @foreach (var seat in row.OrderBy(s => s.Seat))
                {
                    <span class="seat @(seat.Is_Available ? "available" : "occupied")"
                          data-seat-id="@seat.Seat_Id"
                          data-row="@seat.Row"
                          2024-11-18 08:58:40.392916
                          data-last-changed="@seat.Last_Changed.ToString("O")"
                          data-seat-number="@seat.Seat">
                        @seat.Seat
                    </span>
                }
            </div>
        }
    </div>
</div>

<button id="reserve-button" style="display: none;">Reserve Selected Seats</button>

<script>
    (function() {
        const seats = document.querySelectorAll('.seat.available');
        const reserveButton = document.getElementById('reserve-button');
        let selectedSeats = [];

        seats.forEach(seat => {
            seat.addEventListener('click', function() {
                const seatId = parseInt(this.getAttribute('data-seat-id'));
                const lastChanged = this.getAttribute('data-last-changed');

                // Toggle seat selection
                if (this.classList.contains('selected')) {
                    this.classList.remove('selected');
                    selectedSeats = selectedSeats.filter(seat_id => seat_id !== seatId);
                } else {
                    this.classList.add('selected');
                    selectedSeats.push({ id: seatId, last_changed: lastChanged, owner: 'raf' });
                }

                // Show or hide the reserve button based on selection
                reserveButton.style.display = selectedSeats.length > 0 ? 'inline-block' : 'none';
            });
        });

        reserveButton.addEventListener('click', function() {
            if (selectedSeats.length > 0) {
                fetch('/resources/reserve', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ seats: selectedSeats })
                })
                    .then(response => {
                        if (response.ok) {
                            alert('Reservation successful!');

                            // Mark selected seats as not available
                            selectedSeats.forEach(({ seat_id }) => {
                                const seatElement = document.querySelector(`.seat[data-seat-id="${seat_id}"]`);
                                if (seatElement) {
                                    seatElement.classList.remove('available', 'selected');
                                    seatElement.classList.add('occupied');
                                }
                            });

                            // Reset the selected seats
                            selectedSeats = [];
                            reserveButton.style.display = 'none';
                        } else {
                            return response.text().then(text => {
                                alert(`${text}`);
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Failed to reserve seats. Please try again.');
                    });
            }
        });
    })();
</script>


<style>
    .seating-layout {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        gap: 10px; /* Space between rectangles */
        width: 80%; /* Container width */
        margin: auto; /* Center the container */
    }
    
    .sector {
        margin-bottom: 20px;
    }
    .row {
        margin: 5px 0;
    }
    .seat {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        width: 30px;
        height: 30px;
        line-height: normal; /* Ensure line-height does not affect alignment */
        font-size: 14px; /* Adjust as needed */
        text-align: center;
        margin: 2px;
        border-radius: 3px;
        cursor: pointer;
        position: relative;
    }

    .seat.available {
        background-color: #5cb85c; /* Darker green */
    }

    .seat.occupied {
        background-color: #ff003c; /* Light red */
        cursor: not-allowed;
    }

    .seat.selected {
        background-color: #0061de; /* Blue to indicate selection */
        border-color: #0061de;
    }

</style>